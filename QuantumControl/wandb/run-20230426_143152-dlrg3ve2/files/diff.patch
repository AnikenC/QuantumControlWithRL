diff --git a/QuantumControl/quantum_envs/__pycache__/__init__.cpython-39.pyc b/QuantumControl/quantum_envs/__pycache__/__init__.cpython-39.pyc
index fe9ed66..0979c1f 100644
Binary files a/QuantumControl/quantum_envs/__pycache__/__init__.cpython-39.pyc and b/QuantumControl/quantum_envs/__pycache__/__init__.cpython-39.pyc differ
diff --git a/QuantumControl/quantum_envs/envs/CNOTGateCalibration_v0/__pycache__/environment.cpython-39.pyc b/QuantumControl/quantum_envs/envs/CNOTGateCalibration_v0/__pycache__/environment.cpython-39.pyc
index 5376776..5ae4a91 100644
Binary files a/QuantumControl/quantum_envs/envs/CNOTGateCalibration_v0/__pycache__/environment.cpython-39.pyc and b/QuantumControl/quantum_envs/envs/CNOTGateCalibration_v0/__pycache__/environment.cpython-39.pyc differ
diff --git a/QuantumControl/quantum_envs/envs/CNOTGateCalibration_v0/__pycache__/quantum_environment.cpython-39.pyc b/QuantumControl/quantum_envs/envs/CNOTGateCalibration_v0/__pycache__/quantum_environment.cpython-39.pyc
index a44dc01..393fa02 100644
Binary files a/QuantumControl/quantum_envs/envs/CNOTGateCalibration_v0/__pycache__/quantum_environment.cpython-39.pyc and b/QuantumControl/quantum_envs/envs/CNOTGateCalibration_v0/__pycache__/quantum_environment.cpython-39.pyc differ
diff --git a/QuantumControl/quantum_envs/envs/CNOTGateCalibration_v0/__pycache__/utils.cpython-39.pyc b/QuantumControl/quantum_envs/envs/CNOTGateCalibration_v0/__pycache__/utils.cpython-39.pyc
index 3f847f4..66e98d5 100644
Binary files a/QuantumControl/quantum_envs/envs/CNOTGateCalibration_v0/__pycache__/utils.cpython-39.pyc and b/QuantumControl/quantum_envs/envs/CNOTGateCalibration_v0/__pycache__/utils.cpython-39.pyc differ
diff --git a/QuantumControl/quantum_envs/envs/CNOTGateCalibration_v0/environment.py b/QuantumControl/quantum_envs/envs/CNOTGateCalibration_v0/environment.py
index badda8e..1b78403 100644
--- a/QuantumControl/quantum_envs/envs/CNOTGateCalibration_v0/environment.py
+++ b/QuantumControl/quantum_envs/envs/CNOTGateCalibration_v0/environment.py
@@ -20,7 +20,7 @@ class CNOTGateCalibrationEnvironment_V0(gym.Env):
         self.max_reward = 0.
         self.step_for_max_reward = 0
         self.episode_length = 0
-        self.simple_sample = 4
+        self.simple_sample = 0
         self.complete_tomography_state_size = len(self.qenvironment.target.input_states)
         self.process_fidelity = 0.
         self.average_fidelity = 0.
diff --git a/QuantumControl/quantum_envs/envs/CNOTGateCalibration_v0/quantum_environment.py b/QuantumControl/quantum_envs/envs/CNOTGateCalibration_v0/quantum_environment.py
index f92d1a2..9b0a9e8 100644
--- a/QuantumControl/quantum_envs/envs/CNOTGateCalibration_v0/quantum_environment.py
+++ b/QuantumControl/quantum_envs/envs/CNOTGateCalibration_v0/quantum_environment.py
@@ -23,20 +23,19 @@ from qiskit_ibm_runtime import QiskitRuntimeService, Session
 
 from quantum_envs.envs.CNOTGateCalibration_v0.qconfig import QiskitConfig
 from quantum_envs.envs.CNOTGateCalibration_v0.static import AbstractionLevel
-from quantum_envs.envs.CNOTGateCalibration_v0.utils import apply_parametrized_circuit
+from quantum_envs.envs.CNOTGateCalibration_v0.simple_utils import apply_parametrized_circuit
 
 @dataclass
 class QuantumEnvironment:
     abstraction_level: AbstractionLevel
     target: Dict  # TODO: Create its own type for clarity
-    config_path: str = r"/Users/chatt07/Desktop/clean_env/Modif/quantum_environment_config.yml"
     QUA_setup: Optional[Dict] = None
 
     def init_qiskit_setup(self):
         #IBMQ.load_account()
         service = QiskitRuntimeService(
             channel="ibm_quantum",
-            token="4c8ba089b15930777fc8d5501ed739bccaee58f5d9c3b13541776638606834593af6e9b1467ab224ffca2022914cea2e0782958a62c5eb4f2a84d008e12c42e2",
+            #token="4c8ba089b15930777fc8d5501ed739bccaee58f5d9c3b13541776638606834593af6e9b1467ab224ffca2022914cea2e0782958a62c5eb4f2a84d008e12c42e2",
         )
         backend = service.backends(simulator=True)[
             0
@@ -52,7 +51,7 @@ class QuantumEnvironment:
 
         self.n_qubits = 2
         self.n_shots = 1
-        self.sampling_pauli_space = 100
+        self.sampling_pauli_space = 1000
         self.c_factor = 1.
         self.n_actions = 7
 
diff --git a/QuantumControl/quantum_envs/envs/CNOTGateCalibration_v1/__pycache__/environment.cpython-39.pyc b/QuantumControl/quantum_envs/envs/CNOTGateCalibration_v1/__pycache__/environment.cpython-39.pyc
index 5376776..0827195 100644
Binary files a/QuantumControl/quantum_envs/envs/CNOTGateCalibration_v1/__pycache__/environment.cpython-39.pyc and b/QuantumControl/quantum_envs/envs/CNOTGateCalibration_v1/__pycache__/environment.cpython-39.pyc differ
diff --git a/QuantumControl/quantum_envs/envs/CNOTGateCalibration_v1/__pycache__/qconfig.cpython-39.pyc b/QuantumControl/quantum_envs/envs/CNOTGateCalibration_v1/__pycache__/qconfig.cpython-39.pyc
index c3181ad..bbdeb64 100644
Binary files a/QuantumControl/quantum_envs/envs/CNOTGateCalibration_v1/__pycache__/qconfig.cpython-39.pyc and b/QuantumControl/quantum_envs/envs/CNOTGateCalibration_v1/__pycache__/qconfig.cpython-39.pyc differ
diff --git a/QuantumControl/quantum_envs/envs/CNOTGateCalibration_v1/__pycache__/quantum_environment.cpython-39.pyc b/QuantumControl/quantum_envs/envs/CNOTGateCalibration_v1/__pycache__/quantum_environment.cpython-39.pyc
index a44dc01..48757b6 100644
Binary files a/QuantumControl/quantum_envs/envs/CNOTGateCalibration_v1/__pycache__/quantum_environment.cpython-39.pyc and b/QuantumControl/quantum_envs/envs/CNOTGateCalibration_v1/__pycache__/quantum_environment.cpython-39.pyc differ
diff --git a/QuantumControl/quantum_envs/envs/CNOTGateCalibration_v1/__pycache__/static.cpython-39.pyc b/QuantumControl/quantum_envs/envs/CNOTGateCalibration_v1/__pycache__/static.cpython-39.pyc
index 94b09b1..9a6ff66 100644
Binary files a/QuantumControl/quantum_envs/envs/CNOTGateCalibration_v1/__pycache__/static.cpython-39.pyc and b/QuantumControl/quantum_envs/envs/CNOTGateCalibration_v1/__pycache__/static.cpython-39.pyc differ
diff --git a/QuantumControl/quantum_envs/envs/CNOTGateCalibration_v1/__pycache__/target.cpython-39.pyc b/QuantumControl/quantum_envs/envs/CNOTGateCalibration_v1/__pycache__/target.cpython-39.pyc
index a5520b7..eed02a2 100644
Binary files a/QuantumControl/quantum_envs/envs/CNOTGateCalibration_v1/__pycache__/target.cpython-39.pyc and b/QuantumControl/quantum_envs/envs/CNOTGateCalibration_v1/__pycache__/target.cpython-39.pyc differ
diff --git a/QuantumControl/quantum_envs/envs/CNOTGateCalibration_v1/__pycache__/utils.cpython-39.pyc b/QuantumControl/quantum_envs/envs/CNOTGateCalibration_v1/__pycache__/utils.cpython-39.pyc
index 3f847f4..b16385e 100644
Binary files a/QuantumControl/quantum_envs/envs/CNOTGateCalibration_v1/__pycache__/utils.cpython-39.pyc and b/QuantumControl/quantum_envs/envs/CNOTGateCalibration_v1/__pycache__/utils.cpython-39.pyc differ
diff --git a/QuantumControl/quantum_envs/envs/CNOTGateCalibration_v1/environment.py b/QuantumControl/quantum_envs/envs/CNOTGateCalibration_v1/environment.py
index 012f506..9223ddf 100644
--- a/QuantumControl/quantum_envs/envs/CNOTGateCalibration_v1/environment.py
+++ b/QuantumControl/quantum_envs/envs/CNOTGateCalibration_v1/environment.py
@@ -20,7 +20,7 @@ class CNOTGateCalibrationEnvironment_V1(gym.Env):
         self.max_reward = 0.
         self.step_for_max_reward = 0
         self.episode_length = 0
-        self.simple_sample = 1
+        self.simple_sample = 0
         self.complete_tomography_state_size = len(self.qenvironment.target.input_states)
         self.process_fidelity = 0.
         self.average_fidelity = 0.
diff --git a/QuantumControl/quantum_envs/envs/CNOTGateCalibration_v1/quantum_environment.py b/QuantumControl/quantum_envs/envs/CNOTGateCalibration_v1/quantum_environment.py
index aba5686..551edb0 100644
--- a/QuantumControl/quantum_envs/envs/CNOTGateCalibration_v1/quantum_environment.py
+++ b/QuantumControl/quantum_envs/envs/CNOTGateCalibration_v1/quantum_environment.py
@@ -23,20 +23,19 @@ from qiskit_ibm_runtime import QiskitRuntimeService, Session
 
 from quantum_envs.envs.CNOTGateCalibration_v1.qconfig import QiskitConfig
 from quantum_envs.envs.CNOTGateCalibration_v1.static import AbstractionLevel
-from quantum_envs.envs.CNOTGateCalibration_v1.utils import apply_parametrized_circuit
+from quantum_envs.envs.CNOTGateCalibration_v1.simple_utils import apply_parametrized_circuit
 
 @dataclass
 class QuantumEnvironment:
     abstraction_level: AbstractionLevel
     target: Dict  # TODO: Create its own type for clarity
-    config_path: str = r"/Users/chatt07/Desktop/clean_env/Modif/quantum_environment_config.yml"
     QUA_setup: Optional[Dict] = None
 
     def init_qiskit_setup(self):
         #IBMQ.load_account()
         service = QiskitRuntimeService(
             channel="ibm_quantum",
-            token="4c8ba089b15930777fc8d5501ed739bccaee58f5d9c3b13541776638606834593af6e9b1467ab224ffca2022914cea2e0782958a62c5eb4f2a84d008e12c42e2",
+            #token="4c8ba089b15930777fc8d5501ed739bccaee58f5d9c3b13541776638606834593af6e9b1467ab224ffca2022914cea2e0782958a62c5eb4f2a84d008e12c42e2",
         )
         backend = service.backends(simulator=True)[
             0
diff --git a/QuantumControl/quantum_envs/envs/CNOTGateCalibration_v1/utils.py b/QuantumControl/quantum_envs/envs/CNOTGateCalibration_v1/utils.py
deleted file mode 100644
index cdeafcc..0000000
--- a/QuantumControl/quantum_envs/envs/CNOTGateCalibration_v1/utils.py
+++ /dev/null
@@ -1,19 +0,0 @@
-import numpy as np
-from qiskit.circuit import ParameterVector, QuantumCircuit
-
-
-# Ansatz function, could be at pulse level or circuit level
-def apply_parametrized_circuit(qc: QuantumCircuit):
-    """
-    Define ansatz circuit to be played on Quantum Computer. Should be parametrized with Qiskit ParameterVector
-    :param qc: Quantum Circuit instance to add the gates on
-    :return:
-    """
-    # global n_actions
-    # TODO: Parametrize the n_action (7)
-    params = ParameterVector("theta", 7)
-    qc.u(2 * np.pi * params[0], 2 * np.pi * params[1], 2 * np.pi * params[2], 0)
-    #qc.rx(2*np.pi*params[0], 0) # Added
-    #qc.u(2 * np.pi * params[3], 2 * np.pi * params[4], 2 * np.pi * params[5], 0) # Added
-    qc.u(2 * np.pi * params[3], 2 * np.pi * params[4], 2 * np.pi * params[5], 1)
-    qc.rzx(2 * np.pi * params[6], 0, 1)
diff --git a/QuantumControl/quantum_envs/envs/__pycache__/__init__.cpython-39.pyc b/QuantumControl/quantum_envs/envs/__pycache__/__init__.cpython-39.pyc
index 7051b91..1bcf19d 100644
Binary files a/QuantumControl/quantum_envs/envs/__pycache__/__init__.cpython-39.pyc and b/QuantumControl/quantum_envs/envs/__pycache__/__init__.cpython-39.pyc differ
diff --git a/QuantumControl/taster.py b/QuantumControl/taster.py
index b9e13ca..0b92362 100644
--- a/QuantumControl/taster.py
+++ b/QuantumControl/taster.py
@@ -1,5 +1,81 @@
+import time
+
 import quantum_envs
 import gymnasium as gym
+import numpy as np
+
+import matplotlib.pyplot as plt
 
 env = gym.make("quantum_envs/CNOTGateCalibration-v0")
-obs, info = env.reset()
\ No newline at end of file
+obs, info = env.reset()
+action = np.array([0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2], dtype=np.float64)
+simple_action = 2*action
+
+sample_size = 1000
+
+reward_arr = np.zeros(sample_size)
+prc_arr = np.zeros(sample_size)
+avg_arr = np.zeros(sample_size)
+
+max_reward = 0.
+max_avg = 0.
+max_prc = 0.
+
+min_reward = 4.
+min_avg = 4.
+min_prc = 4.
+
+start_time = time.time()
+
+
+for i in range(sample_size):
+    obs, reward, terminated, truncated, info = env.step(simple_action)
+    prc = info["process fidelity"]
+    avg = info["average fidelity"]
+    reward_arr[i] = reward
+    avg_arr[i] = avg
+    prc_arr[i] = prc
+    if prc > max_prc:
+        max_prc = prc
+    elif prc < min_prc:
+        min_prc = prc
+    if avg > max_avg:
+        max_avg = avg
+    elif avg < min_avg:
+        min_avg = avg
+    if reward > max_reward:
+        max_reward = reward
+    elif reward < min_reward:
+        min_reward = reward
+    #print(f"Run {i}")
+    #print(f"reward: {reward}")
+    #print(f"process fidelity: {prc}")
+    #print(f"average fidelity: {avg}")
+
+end_time = time.time()
+print(f"time taken: {end_time - start_time}, time taken per evaluation: {(end_time - start_time)/sample_size}")
+
+mean_reward = np.mean(reward_arr)
+mean_avg = np.mean(avg_arr)
+mean_prc = np.mean(prc_arr)
+
+std_reward = np.std(reward_arr, dtype=np.float64)
+std_avg = np.std(avg_arr, dtype=np.float64)
+std_prc = np.std(prc_arr, dtype=np.float64)
+
+print("Evaluation Statistics")
+print(f"mean reward: {mean_reward}, standard deviation: {std_reward}, max: {max_reward}, min: {min_reward}")
+print(f"mean process fidelity: {mean_prc}, standard deviation: {std_prc}, max: {max_prc}, min: {min_prc}")
+print(f"mean average fidelity: {mean_avg}, standard deviation: {std_avg} max: {max_avg}, min: {min_avg}")
+
+
+'''
+action, action * 2pi
+ranges from -2pi to 2pi
+
+simple_action, simple_action * pi
+ranges from -pi to pi
+
+2*simple_action * pi = action*2pi
+
+'''
\ No newline at end of file
